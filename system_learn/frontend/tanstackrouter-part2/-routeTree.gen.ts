/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as PathlessLayoutRouteRouteImport } from './routes/_pathlessLayout/route'
import { Route as UsersIndexRouteImport } from './routes/users/index'
import { Route as UsersUserIdRouteImport } from './routes/users/$userId'
import { Route as AppSettingsRouteImport } from './routes/app/settings'
import { Route as AppDashboardRouteImport } from './routes/app/dashboard'
import { Route as PathlessLayoutBRouteImport } from './routes/_pathlessLayout/b'
import { Route as PathlessLayoutARouteImport } from './routes/_pathlessLayout/a'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRouteRoute = PathlessLayoutRouteRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRouteImport,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)
const PathlessLayoutBRoute = PathlessLayoutBRouteImport.update({
  id: '/b',
  path: '/b',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)
const PathlessLayoutARoute = PathlessLayoutARouteImport.update({
  id: '/a',
  path: '/a',
  getParentRoute: () => PathlessLayoutRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/a': typeof PathlessLayoutARoute
  '/b': typeof PathlessLayoutBRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/settings': typeof AppSettingsRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users': typeof UsersIndexRoute
}
export interface FileRoutesByTo {
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/a': typeof PathlessLayoutARoute
  '/b': typeof PathlessLayoutBRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/settings': typeof AppSettingsRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users': typeof UsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_pathlessLayout': typeof PathlessLayoutRouteRouteWithChildren
  '/app': typeof AppRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/_pathlessLayout/a': typeof PathlessLayoutARoute
  '/_pathlessLayout/b': typeof PathlessLayoutBRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/settings': typeof AppSettingsRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/users/': typeof UsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/about'
    | '/a'
    | '/b'
    | '/app/dashboard'
    | '/app/settings'
    | '/users/$userId'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/app'
    | '/about'
    | '/a'
    | '/b'
    | '/app/dashboard'
    | '/app/settings'
    | '/users/$userId'
    | '/users'
  id:
    | '__root__'
    | '/_pathlessLayout'
    | '/app'
    | '/about'
    | '/_pathlessLayout/a'
    | '/_pathlessLayout/b'
    | '/app/dashboard'
    | '/app/settings'
    | '/users/$userId'
    | '/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PathlessLayoutRouteRoute: typeof PathlessLayoutRouteRouteWithChildren
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/dashboard': {
      id: '/app/dashboard'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_pathlessLayout/b': {
      id: '/_pathlessLayout/b'
      path: '/b'
      fullPath: '/b'
      preLoaderRoute: typeof PathlessLayoutBRouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
    '/_pathlessLayout/a': {
      id: '/_pathlessLayout/a'
      path: '/a'
      fullPath: '/a'
      preLoaderRoute: typeof PathlessLayoutARouteImport
      parentRoute: typeof PathlessLayoutRouteRoute
    }
  }
}

interface PathlessLayoutRouteRouteChildren {
  PathlessLayoutARoute: typeof PathlessLayoutARoute
  PathlessLayoutBRoute: typeof PathlessLayoutBRoute
}

const PathlessLayoutRouteRouteChildren: PathlessLayoutRouteRouteChildren = {
  PathlessLayoutARoute: PathlessLayoutARoute,
  PathlessLayoutBRoute: PathlessLayoutBRoute,
}

const PathlessLayoutRouteRouteWithChildren =
  PathlessLayoutRouteRoute._addFileChildren(PathlessLayoutRouteRouteChildren)

interface AppRouteRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
  AppSettingsRoute: typeof AppSettingsRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppSettingsRoute: AppSettingsRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  PathlessLayoutRouteRoute: PathlessLayoutRouteRouteWithChildren,
  AppRouteRoute: AppRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
